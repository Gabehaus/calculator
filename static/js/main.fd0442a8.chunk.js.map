{"version":3,"sources":["components/Function.js","App.js","components/Display.js","components/Navbar.js","components/NumberPad.js","components/NumberGrid.js","serviceWorker.js","index.js"],"names":["Function","funcIdProp","funcSymbolProp","mathSymbolProp","clickFuncProp","symbol","mathSymbol","id","className","value","onClick","callClickFunc","App","useState","buttonClicked","setButtonClicked","runningEquation","setRunningEquation","clickNumber","NUM","test","toString","clickFunc","length","substring","clear","equals","eval","propNumClicked","clickTestProp1","Display","equationProp","NavBar","props","state","light","expand","href","Component","NumberPad","padId","padValue","num","secondFunctionProp","padRef","useRef","ref","NumberGrid","numArrayPainted","indProp","sym","name","map","elem","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd0442a8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n//import { Decimal } from \"decimal.js\";\n\nconst Function = ({\n  funcIdProp,\n  funcSymbolProp,\n  mathSymbolProp,\n  clickFuncProp\n}) => {\n  //var Decimal = require(\"decimal.js\");\n  // var x = new Decimal(0.3);\n  // return <div className=\"pad\">{num} pad test</div>;\n  const symbol = funcSymbolProp;\n  const mathSymbol = mathSymbolProp;\n\n  function callClickFunc(symbol, mathSymbol) {\n    clickFuncProp(symbol, mathSymbol);\n  }\n\n  return (\n    <div\n      id={funcIdProp}\n      className=\"func-button\"\n      value={symbol}\n      onClick={() => {\n        callClickFunc(symbol, mathSymbol);\n      }}\n    >\n      {/*{x.minus(0.1).toString()} */}\n      {symbol}\n    </div>\n  );\n};\n\nexport default Function;\n","import React, { useState, useEffect } from \"react\";\nimport NumberGrid from \"./components/NumberGrid\";\nimport Function from \"./components/Function\";\nimport Display from \"./components/Display\";\nimport Navbar from \"./components/Navbar\";\n\nconst App = () => {\n  //const [equation, setEquation] = useState(6);\n  const [buttonClicked, setButtonClicked] = useState(0); //the number at the bottom of the display screen (what you last clicked)\n  const [runningEquation, setRunningEquation] = useState(\"\"); //the equation at top of display screen\n\n  //when number is clicked\n  function clickNumber(NUM) {\n    //condition in which a decimal has already been clicked\n    if (NUM == \".\" && /\\./.test(buttonClicked)) {\n      return;\n    } else if (buttonClicked == 0) {\n      setButtonClicked(NUM.toString());\n      setRunningEquation(NUM);\n    } else {\n      setButtonClicked(buttonClicked => {\n        return buttonClicked + NUM.toString();\n      });\n\n      setRunningEquation(runningEquation => {\n        return runningEquation + NUM.toString();\n      });\n    }\n  }\n\n  //when math function is clicked\n  function clickFunc(symbol, mathSymbol) {\n    //var x = runningEquation.length-1;\n\n    //if a function is clicked and it is not \"-\"\n    if (mathSymbol != \"-\") {\n      //if a function is clicked and it is not \"-\", if the last character in equation IS function\n      if (\n        runningEquation[runningEquation.length - 1] == \"*\" ||\n        runningEquation[runningEquation.length - 1] == \"+\" ||\n        runningEquation[runningEquation.length - 1] == \"-\" ||\n        runningEquation[runningEquation.length - 1] == \"/\"\n      ) {\n        //then replace the last character with the function that was just clicked\n        if (\n          runningEquation[runningEquation.length - 2] == \"*\" ||\n          runningEquation[runningEquation.length - 2] == \"+\" ||\n          runningEquation[runningEquation.length - 2] == \"-\" ||\n          runningEquation[runningEquation.length - 2] == \"/\"\n        ) {\n          setRunningEquation(\n            runningEquation =>\n              runningEquation.substring(0, runningEquation.length - 2) +\n              mathSymbol\n          );\n          setButtonClicked(symbol);\n        } else {\n          setRunningEquation(\n            runningEquation =>\n              runningEquation.substring(0, runningEquation.length - 1) +\n              mathSymbol\n          );\n          setButtonClicked(symbol);\n        }\n      }\n\n      //else if clicked is not \"-\" but previous char was not a function, just add this to end of running equation\n      else {\n        setButtonClicked(symbol);\n        setRunningEquation(runningEquation => {\n          return runningEquation + mathSymbol.toString();\n        });\n      }\n\n      //if clicked IS \"-\" and previous char was \"-\" don't do anything\n    } else if (\n      mathSymbol == \"-\" &&\n      runningEquation[runningEquation.length - 1] == \"-\"\n    ) {\n      return;\n    }\n\n    //if clicked IS \"-\", and previous was not \"-\" just add this to the end of the running equation\n    else {\n      setButtonClicked(symbol);\n      setRunningEquation(runningEquation => {\n        return runningEquation + mathSymbol.toString();\n      });\n    }\n  }\n\n  //when AC is clicked\n  function clear() {\n    setButtonClicked(0);\n    setRunningEquation(\"\");\n  }\n\n  //when equals is clicked\n  function equals() {\n    setButtonClicked(eval(runningEquation));\n    setRunningEquation(runningEquation => eval(runningEquation));\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div id=\"whiteBg\">\n        <div id=\"calc-wrapper\">\n          <div id=\"screen\">\n            <div id=\"forDecimal\">{runningEquation}</div>\n            <Display\n              //equationProp={[equation, setEquation]}\n              propNumClicked={buttonClicked}\n            />\n          </div>\n          <div\n            id=\"clear\"\n            onClick={() => {\n              clear();\n            }}\n          >\n            AC\n          </div>\n          <NumberGrid className=\"num-grid-class\" clickTestProp1={clickNumber} />\n\n          <Function\n            funcIdProp=\"divide\"\n            funcSymbolProp=\"/\"\n            mathSymbolProp=\"/\"\n            clickFuncProp={clickFunc}\n          />\n          <Function\n            funcIdProp=\"multiply\"\n            funcSymbolProp=\"X\"\n            mathSymbolProp=\"*\"\n            clickFuncProp={clickFunc}\n          />\n          <Function\n            funcIdProp=\"subtract\"\n            funcSymbolProp=\"-\"\n            mathSymbolProp=\"-\"\n            clickFuncProp={clickFunc}\n          />\n          <Function\n            funcIdProp=\"add\"\n            funcSymbolProp=\"+\"\n            mathSymbolProp=\"+\"\n            clickFuncProp={clickFunc}\n          />\n          <div\n            id=\"equals\"\n            onClick={() => {\n              equals();\n            }}\n          >\n            =\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\n\nconst Display = ({ equationProp, propNumClicked }) => {\n  //const [equation, setEquation] = equationProp;\n  return (\n    <div id=\"display\" className=\"dsp\">\n      {propNumClicked}\n    </div>\n  );\n};\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\n//import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Fragment } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nexport default class NavBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <Fragment>\n          <Navbar id=\"navbar\" light expand=\"md\">\n            <NavbarBrand href=\"/\" id=\"navElementA\">\n              Calculator\n            </NavbarBrand>\n          </Navbar>\n        </Fragment>\n      </div>\n    );\n  }\n}\n","import React, {\n  useState,\n  useEffect,\n  setEquation,\n  equation,\n  useRef\n} from \"react\";\nimport NumberGrid from \"./NumberGrid\";\n\nconst NumberPad = ({ padId, padValue, secondFunctionProp }) => {\n  const num = padValue;\n  const onClick = secondFunctionProp;\n  const padRef = useRef();\n\n  // return <div className=\"pad\">{num} pad test</div>;\n  return (\n    <div\n      id={padId}\n      className=\"num-button\"\n      value={padValue}\n      onClick={onClick}\n      ref={padRef}\n    >\n      {num}\n    </div>\n  );\n};\n\nexport default NumberPad;\n","import React from \"react\";\nimport NumberPad from \"./NumberPad\";\n\nconst NumberGrid = ({ clickTestProp1, indProp }) => {\n  const numArray = [\n    { sym: 7, name: \"seven\" },\n    { sym: 8, name: \"eight\" },\n    { sym: 9, name: \"nine\" },\n    { sym: 4, name: \"four\" },\n    { sym: 5, name: \"five\" },\n    { sym: 6, name: \"six\" },\n    { sym: 1, name: \"one\" },\n    { sym: 2, name: \"two\" },\n    { sym: 3, name: \"three\" },\n    { sym: 0, name: \"zero\" },\n    { sym: \".\", name: \"decimal\" }\n  ];\n\n  //const clickTestProp1b = clickTestProp1;\n\n  function secondFunction(num) {\n    clickTestProp1(num);\n  }\n\n  var numArrayPainted;\n\n  numArrayPainted = numArray.map((elem, i) => {\n    return (\n      <NumberPad\n        key={elem.sym}\n        padId={elem.name}\n        padValue={elem.sym}\n        secondFunctionProp={() => {\n          secondFunction(elem.sym);\n        }}\n      />\n    );\n  });\n\n  return (\n    <div id=\"num-grid\" className=\"num-grid\">\n      {numArrayPainted}\n    </div>\n  );\n};\n\nexport default NumberGrid;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}